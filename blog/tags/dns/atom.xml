<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[標籤: DNS | 雨吁]]></title>
  <link href="http://shadow.ma/blog/tags/dns/atom.xml" rel="self"/>
  <link href="http://shadow.ma/"/>
  <updated>2013-01-22T17:41:00+08:00</updated>
  <id>http://shadow.ma/</id>
  <author>
    <name><![CDATA[Xinding Ma]]></name>
    <email><![CDATA[i@shadow.ma]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
	<title type="html"><![CDATA[添加 SRV 記錄啓用 Google Apps 對外聊天]]></title>
	<link href="http://shadow.ma/blog/2012/11/18/adding-srv-records-for-enabling-chat-outside-of-google-apps/"/>
    
    <link href="http://shadow.ma/blog/2012/11/18/adding-srv-records-for-enabling-chat-outside-of-google-apps/"/>
    <updated>2012-11-18T17:17:00+08:00</updated>
    <id>http://shadow.ma/blog/2012/11/18/adding-srv-records-for-enabling-chat-outside-of-google-apps</id>
    
    <content type="html"><![CDATA[<p>雖然一直把託管在 Google Apps 的域名郵箱和 Gtalk 放聯繫方式裏，卻一直沒怎麼用，尤其是 Gtalk，最近要用它加個羣時才發現默認情況下只能添加 Gtalk 網絡中的用戶爲好友，要和網絡外的 XMPP 用戶聊天需要爲域名設置 SRV 記錄，參照 <a href="https://support.google.com/a/bin/answer.py?hl=zh-Hant&amp;answer=34143" title="在 Google Apps 之外啟用即時通訊">Google Apps 說明文檔</a>添加就行。</p>

<!-- more -->

<p>對於像我一樣使用 CloudFlare 管理 DNS 的，因爲 CloudFlare 不提供快速添加 Google Apps 相關記錄的工具和嚮導，如果覺得手動添加很麻煩，可以創建如下文件，然後在 DNS 設置中選擇附加這個 zone 文件就能快速添加好。</p>

<p>Liquid error: ClassNotFound: no lexer for alias 'zone' found</p>

<p>手動的話如圖把記錄都添加上就行：<br />
<img src="https://static.xind.in/blog/pic/2012/11/cloudflare-srv-record.png" alt="CloudFlare SRV Record" /></p>

<p>等 DNS 生效就能讓此域名的 Gtalk 用戶和公共 XMPP 網絡用戶聊天了。</p>
]]></content>
    
  </entry>
  
  <entry>
    
	<title type="html"><![CDATA[Linux 下使用 pdnsd 避免 DNS 污染]]></title>
	<link href="http://shadow.ma/blog/2012/11/04/solve-dns-spoofing-in-linux-with-pdnsd/"/>
    
    <link href="http://shadow.ma/blog/2012/11/04/solve-dns-spoofing-in-linux-with-pdnsd/"/>
    <updated>2012-11-04T02:46:00+08:00</updated>
    <id>http://shadow.ma/blog/2012/11/04/solve-dns-spoofing-in-linux-with-pdnsd</id>
    
    <content type="html"><![CDATA[<p>使用公共 DNS 服務可以避免運營商的 DNS 劫持，但除了這個外在兲朝還存在着 <a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98%E6%B1%A1%E6%9F%93#.E9.98.B2.E7.81.AB.E9.95.B7.E5.9F.8E.E7.9A.84.E7.B7.A9.E5.AD.98.E6.B1.A1.E6.9F.93.E6.94.BB.E6.93.8A">DNS 緩存污染</a>的問題，以前使用 GoAgent 等工具時沒有注意到這個，一直在運行着的 dnsmasq 也只用來作簡單的緩存服務，最近開始長時間掛着 VPN 有時卻打不開 Twitter，才發現是這個問題在作怪。</p>

<!-- more -->

<h2 id="section">分析</h2>
<blockquote>
  <p>在中國大陸，對於所有經過防火長城的在UDP的53埠上的域名查詢進行IDS入侵檢測，一經發現與黑名單關鍵詞相匹配的域名查詢請求，其會馬上偽裝成標的域名的解析伺服器給查詢者返回虛假結果。由於通常的域名查詢沒有任何認證機制，而且域名查詢通常基於的UDP協議是無連線不可靠的協議，查詢者只能接受最先到達的格式正確結果，並丟棄之後的結果。</p>
</blockquote>

<p>也就是說就算使用的是牆外的 DNS 服務器也仍然會被污染。像我的情況，因爲使用了本地的 DNS 緩存服務和 chnroutes 的原因，不是所有的 DNS 記錄都是使用 VPN 通道的 DNS 服務器查詢的，所以出現了掛着 VPN 卻打不開 Twitter 的情況，DNS 查詢到的是錯誤的 ip。</p>

<h2 id="section-1">思路</h2>
<ol>
  <li>連接 VPN 後重啓 DNS 緩存服務，只對於像我這樣使用 VPN 且本地有緩存服務的，只需要在<a href="/blog/2012/10/18/configure-vpnc-route-tables-with-networkmanager/" title="使用 NetworkManager 設置 VPNC 和路由表">之前</a>設置的連接腳本裏加上重啓服務的命令就行（當然還需要把緩存服務的上遊 DNS 設成牆外的服務器）</li>
  <li>使用 tcp 方式查詢，tcp 的 DNS 請求會出現被 reset 的情況</li>
  <li>把 DNS 服務轉發到非標準端口，這個需要自己有牆外的服務器資源</li>
  <li>使用提供非標準端口服務的 DNS，只有很少的服務器支持</li>
</ol>

<p>因爲提供非標準端口服務的 DNS 太少，而且在我這兒速度都不快，權衡來看，可以優先使用不算太穩定的 tcp 方式查詢，把非標準端口的 upd 查詢作爲 fallback，對於 linux 來說可以通過設置防火牆規則定義 DNS 存取方式，不過還是推介配置本地的 DNS 轉發服務更爲簡單方便。</p>

<p>因爲之前一直用的 dnsmasq 不支持 tcp 方式查詢，Google 發現了 pdnsd 後就立即換了上來，相對於 dnsmasq 來說功能單一，但更爲強大，單就作 DNS 緩存來說 dnsmasq 就不能修改 TTL。</p>

<h2 id="section-2">操作</h2>
<p>對於 Arch 來說直接 <code>yaourt -S pdnsd</code> 安裝就好，然後創建配置文件</p>

<pre><code>sudo cp /etc/pdnsd.conf.sample /etc/pdnsd.conf
</code></pre>

<p>修改配置文件</p>

<p>``` c /etc/pdnsd.conf
global {
        perm_cache=4096;
        cache_dir=”/var/cache/pdnsd”;
#       pid_file = /var/run/pdnsd.pid;
        run_as=”nobody”;
        server_ip = 127.0.0.1;  # Use eth0 here if you want to allow other machines on your network to query pdnsd.
        status_ctl = on;
        paranoid=on;            # This option reduces the chance of cache poisoning but may make pdnsd less efficient, unfortunately.
        query_method=tcp_udp;   # 優先使用 tcp 方式查詢
        min_ttl=1d;             # 緩存記錄最少保存一天
        max_ttl=1w;             # One week.
        timeout=10;             # Global timeout option (10 seconds).
        neg_domain_pol=on;
        udpbufsize=1024;        # Upper limit on the size of UDP messages.
        tcp_qtimeout=1;         # tcp 查詢超時
        par_queries=2;          # 同時從兩組服務器查詢
}</p>

<p>server {
        label= “myisp”;
        ip = 114.114.114.114; 
        timeout=4;
        uptest=ping;
        ping_timeout = 100;
        interval=10m;
        purge_cache=off;
        edns_query=off;
        policy=excluded;
        include=.cn,
                .xn–fiqs8s,   # .中国
                .115.com,
                .126.com,
                .126.net,
                .163.com,
                .17173.com,
                .17cdn.com,
                .51.la,
                .6rooms.com,
                .91.com,
                .alimama.com,
                .alipay.com,
                .atpanel.com,
                .baidu.com,
                .bdimg.com,
                .bilibili.tv,
                .ccb.com,
                .cdn20.com,
                .cnepub.com,
                .cnzz.com,
                .douban.com,
                .douban.fm,
                .duomi.com,
                .gtimg.com,
                .hdslb.com,
                .hiapk.com,
                .hoopchina.com,
                .hupu.com,
                .iask.com,
                .ifeng.com,
                .ifengimg.com,
                .ijinshan.com,
                .iqiyi.com,
                .jing.fm,
                .kandian.com,
                .kandian.net,
                .kanimg.com,
                .kdnet.net,
                .koudai8.com,
                .ku6cdn.com,
                .ku6.com,
                .letv.com,
                .loli.mg,
                .loli.vg,
                .lxdns.com,
                .mapbar.com,
                .microsoft.com,
                .mop.com,
                .mydrivers.com,
                .netease.com,
                .pengyou.com,
                .qiyi.com,
                .qiyipic.com,
                .qq.com,
                .qqmail.com,
                .qstatic.com,
                .renren.com,
                .sdo.com,
                .sina.com,
                .sinaedge.com,
                .sogou.com,
                .sohu.com,
                .soso.com,
                .tanx.com,
                .taobaocdn.com,
                .taobao.com,
                .tbcache.com,
                .tdimg.com,
                .tencent.com,
                .thawte.com,
                .tianyaui.com,
                .tmall.com,
                .tudou.com,
                .tudouui.com,
                .weibo.com,
                .wrating.com,
                .xiami.com,
                .xiami.net,
                .xiaonei.com,
                .xlpan.com,
                .xunlei.com,
                .ydstatic.com,
                .ykimg.com,
                .youdao.com,
                .youku.com,
                .zbjimg.com,
                .zhubajie.com;
}</p>

<h1 id="the-servers-provided-by-opendns-are-fast-but-they-do-not-reply-with">The servers provided by OpenDNS are fast, but they do not reply with</h1>
<p># NXDOMAIN for non-existant domains, instead they supply you with an
# address of one of their search engines. They also lie about the addresses of 
# of the search engines of google, microsoft and yahoo.
# If you do not like this behaviour the “reject” option may be useful.
server {
        label = “opendns”;
        ip = 208.67.222.222, 208.67.220.220;
        reject = 208.69.32.0/24,  # You may need to add additional address ranges
                 208.69.34.0/24,  # here if the addresses of their search engines
                 208.67.219.0/24, # change.
                 208.67.217.0/24,
                 208.67.216.0/24;
        reject_policy = fail;     # If you do not provide any alternative server sections, like the following root-server example, “negate” may be more appropriate here.
        port = 5353;              # 指定支持的非標準端口
        timeout = 4;
        uptest = ping;            # Test availability using ICMP echo requests.
        ping_timeout = 100;       # ping test will time out after 10 seconds.
        interval = 15m;           # Test every 15 minutes.
        preset = off;
}</p>

<p>server {
        label= “v2ex”;
        ip = 199.91.73.222;       # v2ex 只有這個地址有非標準端口所以單獨放出來
        port = 3389;              # 指定支持的非標準端口
        timeout=4;
        uptest=ping;
        ping_timeout = 100;
        interval=10m;
        purge_cache=off;
        edns_query=off;
}</p>

<p>server {
        label= “hinet”;
        ip = 168.95.1.1, 168.95.192.1, 168.95.192.2;
        timeout=4;
        uptest=ping;
        ping_timeout = 100;
        interval=10m;
        purge_cache=off;
        edns_query=off;
}</p>

<p>server {
        label= “google dns”;
        ip = 8.8.8.8, 8.8.4.4;
        timeout=4;
        uptest=ping;
        ping_timeout = 100;
        interval=10m;
        purge_cache=off;
        edns_query=off;
}
```
全局配置中 <code>query_method</code> 可以設爲 tcp_only，我設置成 tcp_udp 優先使用 tcp 方式查詢所以還得設置 <code>tcp_qtimeout</code>，tcp 方式查詢超時就放棄。</p>

<p>我把 ISP 或者國內的 DNS 服務器放到了最前面，只查詢指定的域名，解決某些國內網站因爲是國外 DNS 請求而返回了過慢的 CDN 線路的 ip，網站列表來源於 <a href="http://felixc.at/Dnsmasq">http://felixc.at/Dnsmasq</a> ，之後先放上提供非標準端口服務的 DNS 服務器，在 tcp 無法查詢轉而使用 udp 方式時使用非標準端口避免 DNS 污染，最後放上我常用的中華電信和 Google 的 DNS，都支持 tcp 方式查詢。</p>

<p>啓動服務</p>

<pre><code>sudo systemctl start pdnsd.service
</code></pre>

<p>設爲開機啓動</p>

<pre><code>sudo systemctl enable pdnsd.service
</code></pre>

<h2 id="section-3">測試</h2>
<p><img src="https://static.xind.in/blog/pic/2012/11/dns-spoofing.png" alt="DNS 被污染，返回了錯誤的 ip" /></p>

<p><img src="https://static.xind.in/blog/pic/2012/11/dns-spoofing-sloved.png" alt="成功得到正確 ip" /></p>

<p>使用本地的轉發服務查詢 twitter.com 返回正確 ip，說明在服務器最前列的國內的 DNS 的確沒查詢列表外的域名。</p>

<h2 id="section-4">疑難解答</h2>

<h3 id="section-5">系統啓動時不可用</h3>
<p>因爲 pdnsd 服務啓動時網絡還沒連接上，服務器無法通過檢測被忽略，導致無服務器可進行查詢，請將至少將一組服務器中的 <code>uptest</code> 設爲 none，並設置 <code>preset</code> 爲 on，讓服務器初始爲可用。</p>

<h2 id="section-6">後記</h2>
<p>從之後的測試來看上面的方案並不可靠，原本優先使用 tcp 的原因是希望有更好的速度，但爲了預防查詢失敗仍然不得不把支持非標準端口查詢但在我這兒速度較慢的服務器放在前列，這樣還不如直接用非標準端口的 udp 方式從這些服務器查詢，而且在 tcp_udp 模式下，tcp 查詢超時就會轉而使用 udp 方式，但 tcp 請求被重置，會被當作 negative 結果返回，這樣的話就要把 <code>neg_domain_pol</code> 設爲 off，不緩存 negative 結果，要不很長一段時間都無法訪問這域名，但所有的 negative 結果都不緩存的話，會增加不必要的查詢請求，耗費資源。</p>

<p>總之，現階段最好的方案是直接使用非標準端口的 udp 查詢，把 <code>query_method</code> 設成 udp_only，刪去不支持非標準端口查詢的服務器，要是自已有境外的服務器資源的話，可以把自己要用的 DNS 服務器轉發到非標準端口來用。</p>
]]></content>
    
  </entry>
  
</feed>

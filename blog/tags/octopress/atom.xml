<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[標籤: Octopress | 雨吁]]></title>
  <link href="http://shadow.ma/blog/tags/octopress/atom.xml" rel="self"/>
  <link href="http://shadow.ma/"/>
  <updated>2012-11-20T20:19:41+08:00</updated>
  <id>http://shadow.ma/</id>
  <author>
    <name><![CDATA[Shadow Ma]]></name>
    <email><![CDATA[i@shadow.ma]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
	<title type="html"><![CDATA[爲 Octopress 分類添加中文支持]]></title>
	<link href="http://shadow.ma/blog/2012/11/19/adding-non-ascii-characters-support-for-octopress-category/"/>
    
    <link href="http://shadow.ma/blog/2012/11/19/adding-non-ascii-characters-support-for-octopress-category/"/>
    <updated>2012-11-19T15:46:00+08:00</updated>
    <id>http://shadow.ma/blog/2012/11/19/adding-non-ascii-characters-support-for-octopress-category</id>
    
    <content type="html"><![CDATA[<p>雖然講的是分類（Category），但現在我這兒沒有分類只有標籤（Tag），Octopress 自帶的分類根本就是當作標籤用，再加上自己很少用分類，就把所有分類相關的字樣全改成了標籤，這樣看着不那麼彆扭，插件什麼的全改了，改動過程十分蛋疼就不說了，這裏還是按本來的 Category 來說。</p>

<!-- more -->


<p>Octopress 自帶的分類生成插件「category_generator.rb」不能處理非 ASCII 字符分類，Google 到兩種修改插件方法，一種是<a href="https://geron.heroku.com/blog/2012/03/octo-cate-cn-spo" title="Octopress博客分类添加中文支持">直接把分類目錄名轉換爲 url 編碼</a>，另一種是<a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/" title="关于在64位 Windows 7 中部署中文化的Octopress">分離分類顯示名和路徑名</a>，對比之後決定採用後一種方案，避免 url 中包含辨識度低的編碼。</p>

<p>參照 <a href="http://www.sprabbit.com/" title="超科學兔耳中隊">SPRABBIT</a> 火霧宗師的<a href="https://github.com/denjones/denjones.github.com/commit/1d4f3b9433a4d77e31530c4d5f20611c9b9829e2#diff-1">修改</a>把分類格式改爲 <code>&lt;分類顯示名稱&gt;{&lt;分類目錄名稱&gt;}</code>，然後如此創建分類：</p>

<p><code>
categories:  隨筆{essay}
</code></p>

<p>就能把顯示爲「隨筆」的分類頁面保存在一個叫「essay」的目錄中。</p>

<p>但這裏存在兩個問題，一是每次建立分類時都必須加上後面的分類目錄名稱，不然在 generate 時會報錯，二是爲了規範 url 原來的插件會先把分類中的大寫轉換爲小寫、空格替換爲「-」才作爲目錄名，但這個字符串處理也被作者去除了，雖然指定目錄名時稍加注意就好，但增強健壯性的話，就算以後隨意些也沒問題。</p>

<p>第一個問題，在調用分類的地方加上條件判斷，指定了目錄名時先作相應處理，沒有指定目錄名就像原來一樣使用這個分類，比如:
<code>ruby
self.data['title']       = "#{title_prefix}#{if (/.*{.*}$/ === category) then "#{category[/[^{]*/]}" else "#{category}" end}"
</code>
在指定了目錄名時分類會變成 <code>&lt;分類顯示名稱&gt;{&lt;分類目錄名稱&gt;}</code> 的格式，需要用正則表達式 <code>category[/[ ^ { ]*/]</code> 取出 <code>&lt;分類顯示名稱&gt;</code> 這一部分用於顯示，沒有指定目錄名時直接就是 <code>&lt;分類顯示名稱&gt;</code>，這樣只有在分類是中文時才需要指定目錄名。</p>

<p>目錄名的部分也作相應修改，比如：
<code>ruby
self.write_category_index(File.join(dir, "#{if (/.*{.*}$/ === category) then "#{category[/(?&lt;={)[^}]*/]}" else "#{category}" end}".gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), category)
</code>
正則表達式 <code>category[/(?&lt;={)[^}]*/]</code> 用於取出大括號中的分類目錄名稱，這裏保留 gsub 和 downcase 的字符串處理，在指定目錄名稱時可以不用在意空格和大小寫。</p>

<p>其它部分可以參考我修改的標籤插件。
<div><script src='https://gist.github.com/4109451.js?file='></script>
<noscript><pre><code># encoding: utf-8
#
# Jekyll tag page generator.
# http://recursive-design.com/projects/jekyll-plugins/
#
# Version: 0.1.4 (201101061053)
#
# Copyright (c) 2010 Dave Perrett, http://recursive-design.com/
# Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
#
# A generator that creates tag pages for jekyll sites.
#
# Included filters :
# - tag_links:      Outputs the list of tags as comma-separated &lt;a&gt; links.
# - date_to_html_string: Outputs the post.date as formatted html, with hooks for CSS styling.
#
# Available _config.yml settings :
# - tag_dir:          The subfolder to build tag pages in (default is 'tags').
# - tag_title_prefix: The string used before the tag name in the page title (default is
#                          'Tag: ').

module Jekyll

  # The TagIndex class creates a single tag page for the specified tag.
  class TagIndex &lt; Page

    # Initializes a new TagIndex.
    #
    #  +base+         is the String path to the &lt;source&gt;.
    #  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
    #  +tag+     is the tag currently being processed.
    def initialize(site, base, tag_dir, tag)
      @site = site
      @base = base
      @dir  = '/' + tag_dir
      @name = 'index.html'
      self.process(@name)
      # Read the YAML data from the layout page.
      self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')
      self.data['tag']    = tag
      # Set the title for this page.
      title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
      self.data['title']       = &quot;#{title_prefix}#{if (/.*{.*}$/ === tag) then &quot;#{tag[/[^{]*/]}&quot; else &quot;#{tag}&quot; end}&quot;
      # Set the meta-description for this page.
      meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
      self.data['description'] = &quot;#{meta_description_prefix}#{if (/.*{.*}$/ === tag) then &quot;#{tag[/[^{]*/]}&quot; else &quot;#{tag}&quot; end}&quot;
    end

  end

  # The TagFeed class creates an Atom feed for the specified tag.
  class TagFeed &lt; Page

    # Initializes a new TagFeed.
    #
    #  +base+         is the String path to the &lt;source&gt;.
    #  +tag_dir+ is the String path between &lt;source&gt; and the tag folder.
    #  +tag+     is the tag currently being processed.
    def initialize(site, base, tag_dir, tag)
      @site = site
      @base = base
      @dir  = tag_dir
      @name = 'atom.xml'
      self.process(@name)
      # Read the YAML data from the layout page.
      self.read_yaml(File.join(base, '_includes/custom'), 'tag_feed.xml')
      self.data['tag']    = tag
      # Set the title for this page.
      title_prefix             = site.config['tag_title_prefix'] || 'Tag: '
      self.data['title']       = &quot;#{title_prefix}#{if (/.*{.*}$/ === tag) then &quot;#{tag[/[^{]*/]}&quot; else &quot;#{tag}&quot; end}&quot;
      # Set the meta-description for this page.
      meta_description_prefix  = site.config['tag_meta_description_prefix'] || 'Tag: '
      self.data['description'] = &quot;#{meta_description_prefix}#{if (/.*{.*}$/ === tag) then &quot;#{tag[/[^{]*/]}&quot; else &quot;#{tag}&quot; end}&quot;

      # Set the correct feed URL.
      self.data['feed_url'] = &quot;#{tag_dir}/#{name}&quot;
    end

  end

  # The Site class is a built-in Jekyll class with access to global site config information.
  class Site

    # Creates an instance of TagIndex for each tag page, renders it, and
    # writes the output to a file.
    #
    #  +tag_dir+ is the String path to the tag folder.
    #  +tag+     is the tag currently being processed.
    def write_tag_index(tag_dir, tag)
      index = TagIndex.new(self, self.source, tag_dir, tag)
      index.render(self.layouts, site_payload)
      index.write(self.dest)
      # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
      self.pages &lt;&lt; index

      # Create an Atom-feed for each index.
      feed = TagFeed.new(self, self.source, tag_dir, tag)
      feed.render(self.layouts, site_payload)
      feed.write(self.dest)
      # Record the fact that this page has been added, otherwise Site::cleanup will remove it.
      self.pages &lt;&lt; feed
    end

    # Loops through the list of tag pages and processes each one.
    def write_tag_indexes
      if self.layouts.key? 'tag_index'
        dir = self.config['tag_dir'] || 'tags'
        self.tags.keys.each do |tag|
          self.write_tag_index(File.join(dir, &quot;#{if (/.*{.*}$/ === tag) then &quot;#{tag[/(?&lt;={)[^}]*/]}&quot; else &quot;#{tag}&quot; end}&quot;.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), tag)
        end

      # Throw an exception if the layout couldn't be found.
      else
        throw &quot;No 'tag_index' layout found.&quot;
      end
    end

  end


  # Jekyll hook - the generate method is called by jekyll, and generates all of the tag pages.
  class GenerateTags &lt; Generator
    safe true
    priority :low

    def generate(site)
      site.write_tag_indexes
    end

  end


  # Adds some extra filters used during the tag creation process.
  module Filters

    # Outputs a list of tags as comma-separated &lt;a&gt; links. This is used
    # to output the tag list for each post on a tag page.
    #
    #  +tags+ is the list of tags to format.
    #
    # Returns string
    #
    def tag_links(tags)
      dir = @context.registers[:site].config['tag_dir']
      tags = tags.sort!.map do |item|
        &quot;&lt;a class='tag' href='/#{dir}/#{&quot;#{if item.include? &quot;}&quot; then item[/(?&lt;={)[^}]*/] else item end}&quot;.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{if item.include? &quot;}&quot; then &quot;#{item[/[^{]*/]}&quot; else &quot;#{item}&quot; end}&lt;/a&gt;&quot;
      end

      case tags.length
      when 0
        &quot;&quot;
      when 1
        tags[0].to_s
      else
        &quot;#{tags[0...-1].join(', ')}, #{tags[-1]}&quot;
      end
    end

    # Outputs the post.date as formatted html, with hooks for CSS styling.
    #
    #  +date+ is the date object to format as HTML.
    #
    # Returns string
    def date_to_html_string(date)
      result = '&lt;span class=&quot;month&quot;&gt;' + date.strftime('%b').upcase + '&lt;/span&gt; '
      result += date.strftime('&lt;span class=&quot;day&quot;&gt;%d&lt;/span&gt; ')
      result += date.strftime('&lt;span class=&quot;year&quot;&gt;%Y&lt;/span&gt; ')
      result
    end

  end

end
</code></pre></noscript></div>
</p>
]]></content>
    
  </entry>
  
  <entry>
    
	<title type="html"><![CDATA[Hello Octopress!]]></title>
	<link href="http://shadow.ma/blog/2012/09/26/hello-octopress/"/>
    
    <link href="http://shadow.ma/blog/2012/09/26/hello-octopress/"/>
    <updated>2012-09-26T17:16:00+08:00</updated>
    <id>http://shadow.ma/blog/2012/09/26/hello-octopress</id>
    
    <content type="html"><![CDATA[<p>近幾個月一真沒更新過博客，也沒登錄過，上一次登錄還是因爲升級 Wordpress ，懶得再折騰 Wordpress 了，最近收到了主機的續費通知就想換個平臺，很久以前就想試試 Octopress，在主機到期前正好嘗試下。</p>

<!-- more -->


<p>花兩天改造了下模板，佈局弄得和以前一樣了，之前的文章因爲以前的爛習慣鏈接格式亂七八糟的，全部處理太麻煩所以不想轉過來了，先用段時間看吧。</p>
]]></content>
    
  </entry>
  
</feed>
